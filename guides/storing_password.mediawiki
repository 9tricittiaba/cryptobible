== Can I hash a password ? ==

'''No'''. A hash function is not a proper primitive to store a hash function, it has many shortcomings but the most important one is that it is designed to be fast, which facilitates attacks on short passwords.

Instead use a password hashing function like Argon2 which won the password hashing competition. If you can't, use one of these (in order):

# scrypt
# bcrypt
# pbkdf2

But note that you need to configure them as they have insecure defaults (unlike Argon2).

== What is a good policy for strong passwords? ==

# Have a minimum size of 8 characters
# Have a maximum size of 120 characters
# Do not restrict the character set
# Do not enforce mandatory characters

== Is the  ==

against rainbow attacks

== What is a pepper ? ==

it is useful in some attacks, and not costly. But definitely defense in depth. Encrypting a password hash with a private key.

== How to upgrade password storage without affecting current user ? ==

facebook onion

== Can I hash passwords with MD5, SHA-1, SHA-2 or other hash function? ==

No.

It's too fast.

Even with a salt.

Or a paper.

No.

Refer to "Can I hash a password ?"

== Can I hash a password with bcrypt, scrypt or PBKDF2? ==

you need to configure them correctly. That is the problem.

== How can I store passwords? ==

Use Argon2. There are no bad configuration.

Salt?

== Client-side hashing? ==

javascript hashing

it's good because:

# you don't get to see the actual password
# the client contribute to the password hashing

in reality:

# Argon2 could be heavy to run on the client side
# if you have an active attacker then none of this is useful (even argon2), if you have a passive attacker, it is useful 

== More security? ==

PASS / Makwa with delegated password hashing

